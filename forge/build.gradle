plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
}

loom {
    forge {
        mixinConfig "gazebo.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

repositories {
    maven { url 'https://jitpack.io' }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    // modApi "dev.architectury:architectury-forge:${rootProject.architectury_version_api}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    shadowCommon(common("com.github.ZsoltMolnarrr:TinyConfig:${project.tiny_config_version}"))
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
    relocate 'net.tinyconfig', 'net.gazebo.tinyconfig'
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

if(project.hasProperty('release_type')) {
    tasks.register("publishMod") {
        dependsOn(build)
        finalizedBy(tasks.curseforge)
        finalizedBy(tasks.modrinth)
    }

    curseforge {
        apiKey = System.getenv("CURSEFORGE_API_KEY")
        project {
            id = '856548'
            changelog = changelog_last_section()
            changelogType = 'markdown'
            releaseType = release_type
            addGameVersion "${rootProject.minecraft_version}"
            addGameVersion "Forge"

            relations {
                requiredDependency 'fabric-api'
                requiredDependency 'spell-engine'
                requiredDependency 'spell-power'
                requiredDependency 'rune-crafting'
            }

            mainArtifact(remapJar)
            afterEvaluate {
                uploadTask.dependsOn(remapJar)
            }
            options {
                forgeGradleIntegration = false
            }
        }
    }

    modrinth {
        token = System.getenv("MODRINTH_API_KEY")
        projectId = "gazebo-and-priests" // This can be the project ID or the slug. Either will work!
        versionName = "${version}" // You don't need to set this manually. Will fail if Modrinth has this version already
        versionNumber = "${version}-forge" // You don't need to set this manually. Will fail if Modrinth has this version already
        versionType = release_type // This is the default -- can also be `beta` or `alpha`
        uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
        gameVersions = ["${rootProject.minecraft_version}"] // Must be an array, even with only one version
        loaders = ["forge"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
        dependencies { // A special DSL for creating dependencies
            // scope.type
            // The scope can be `required`, `optional`, `incompatible`, or `embedded`
            // The type can either be `project` or `version`
            required.project 'spell-engine'
        }
    }
}